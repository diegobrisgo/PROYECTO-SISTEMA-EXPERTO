import json

class KnowledgeBase:
    def __init__(self, filename='knowledge_base.json'):
        self.filename = filename
        self.knowledge = {}
        self.load_knowledge()
        self.initialize_default_knowledge()

    def load_knowledge(self):
        """Carga el conocimiento de un archivo JSON."""
        try:
            with open(self.filename, 'r', encoding='utf-8') as file:
                self.knowledge = json.load(file)
                print("Conocimiento cargado correctamente.")
        except FileNotFoundError:
            print("Archivo no encontrado. Inicializando base de datos vacía.")
        except json.JSONDecodeError:
            print("Error al decodificar el archivo JSON. Inicializando una base de datos vacía.")
        except Exception as e:
            print(f"Error inesperado al cargar el archivo: {e}")

    def save_knowledge(self):
        """Guarda el conocimiento en un archivo JSON."""
        try:
            with open(self.filename, 'w', encoding='utf-8') as file:
                json.dump(self.knowledge, file, ensure_ascii=False, indent=4)
                print("Conocimiento guardado correctamente.")
        except Exception as e:
            print(f"Error al guardar el archivo: {e}")

    def initialize_default_knowledge(self):
        """Inicializa el conocimiento predeterminado si está vacío."""
        default_knowledge = {
            "hola": "¡Hola! ¿Cómo estás?",
            "cómo estás?": "Estoy bien, gracias. ¿De qué te gustaría hablar?",
            "de qué te gustaría hablar?": "Hablemos de cualquier tema que te interese."
        }
        self.knowledge.update(default_knowledge)
        self.save_knowledge()

    def get_response(self, user_input):
        """Devuelve la respuesta basada en la entrada del usuario."""
        return self.knowledge.get(user_input.lower(), None)

    def add_knowledge(self, user_input, response):
        """Añade nuevo conocimiento a la base de datos."""
        if user_input.strip() and response.strip():
            self.knowledge[user_input.lower()] = response
            self.save_knowledge()
            print(f"Nuevo conocimiento agregado: '{user_input}' -> '{response}'")
        else:
            print("El conocimiento y la respuesta no pueden estar vacíos.")

class Chatbot:
    def __init__(self):
        self.knowledge_base = KnowledgeBase()

    def ask_for_new_knowledge(self):
        """Pregunta al usuario si puede ingresar nuevo conocimiento."""
        nuevo_conocimiento = input("¿Qué te gustaría enseñarme? ")
        respuesta = input("¿Cuál sería la respuesta a eso? ")
        self.knowledge_base.add_knowledge(nuevo_conocimiento, respuesta)
        print("Chatbot: Gracias, he aprendido algo nuevo.")

    def chat(self):
        """Inicia la conversación del chatbot."""
        print("Chatbot: Hola, soy un chatbot. ¿Cómo puedo ayudarte? (Escribe 'salir' para terminar la conversación)")
        while True:
            usuario_input = input("Tú: ")
            if usuario_input.lower() == 'salir':
                print("Chatbot: ¡Hasta luego!")
                break
            
            respuesta = self.knowledge_base.get_response(usuario_input)
            if respuesta:
                print("Chatbot:", respuesta)
            else:
                print("Chatbot: No tengo información sobre eso.")
                self.ask_for_new_knowledge()

# Iniciar el chatbot
if __name__ == "__main__":
    chatbot = Chatbot()
    chatbot.chat()
